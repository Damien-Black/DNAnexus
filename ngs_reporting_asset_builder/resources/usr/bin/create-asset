#!/usr/bin/python2.7
from __future__ import print_function
import argparse
import os
import re
import subprocess
import tempfile

import dxpy

###########
# Code from create_asset_trusty
###########

def get_file_list(output_file, resources_to_ignore):
    """
    This method find all the files in the system and writes it to the output file
    """
    tmp_dir = os.path.dirname(output_file) + "*"
    # skipped_paths = ["/proc*", tmp_dir, "/run*", "/boot*", "/home/dnanexus*", "/sys*",
    #                  "/dev*", "/var/log*", "/root*"]
    cmd = ["sudo", "find", "/", "-path", "'/miniconda*'"]
    # for ignore_dir in skipped_paths + resources_to_ignore:
    #     cmd.extend(["-not", "-path", ignore_dir])
    print("create_asset: find cmd: " + " ".join(cmd))
    os.system(" ".join(cmd))
    print()

    env = os.environ.copy()
    env['LC_ALL'] = 'C'
    ps_pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    ps_file = subprocess.Popen(["sort"], stdin=ps_pipe.stdout, stdout=subprocess.PIPE,
                               env=env)

    with open(output_file, "w") as bfile:
        for line in ps_file.stdout:
            sp_code = ps_file.poll()
            file_name = line.rstrip()
            if file_name == "":
                if sp_code is not None:
                    break
                else:
                    continue
            if file_name == "/":
                continue
            try:
                mtime = str(os.path.getmtime(file_name))
            except OSError as os_err:
                print(os_err)
                mtime = ''
            # file_name should not have special characters
            bfile.write(file_name + "\t" + str(mtime) + '\n')
    ps_file.stdout.close()

def get_system_snapshot(output_file_path, ignore_files):
    tmp_file_path = tempfile.mktemp()
    get_file_list(tmp_file_path, ignore_files)
    with open(output_file_path, 'w') as output_file_handle:
        proc = subprocess.Popen(['sort', tmp_file_path], stdout=output_file_handle)
        proc.communicate()

def get_file_diffs(first_file, second_file, diff_file):
    """ Get difference between two txt files and write the difference to the
    third file.
    """
    cmd = ["sudo", "comm", "-13", first_file, second_file]
    ps_pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    with open(diff_file, "w") as bfile:
        for line in ps_pipe.stdout:
            line = line.rstrip()
            file_name = '\t'.join(line.split('\t')[:-1])
            bfile.write(file_name + '\n')
            print(file_name)
    ps_pipe.stdout.close()

def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--name",
        required=True,
        help="Name of the asset")
    parser.add_argument(
        "--title",
        required=True,
        help="Title of the asset")
    parser.add_argument(
        "--description",
        required=True,
        help="Description of the asset")
    parser.add_argument(
        "--version",
        required=True,
        help="Version of the asset to build")

    return parser

def main():
    parser = get_parser()
    args = parser.parse_args()

    before_file_list_path = os.path.join(tempfile.gettempdir(), "before-sorted.txt")
    after_file_list_path = os.path.join(tempfile.gettempdir(), "after-sorted.txt")
    print("create-asset before_file_list_path: " + before_file_list_path)
    print("create-asset after_file_list_path: " + after_file_list_path)
    get_system_snapshot(after_file_list_path, [])

    diff_file_path = os.path.join(tempfile.gettempdir(), "diff.txt")
    get_file_diffs(before_file_list_path, after_file_list_path, diff_file_path)
    print("before_file_list_path: cat " + before_file_list_path)
    os.system("cat " + before_file_list_path)
    print("after_file_list_path: cat " + after_file_list_path)
    os.system("cat " + after_file_list_path)
    print("diff_file_path: cat " + diff_file_path)
    os.system("cat " + diff_file_path)

    tar_output = re.sub(r"\s+", '-', args.name) + ".tar.gz"
    tar_output = dxpy.PROJECT_CONTEXT_ID + ":" + tar_output
    tar_cmd = ["sudo", "tar", "-Pcz", "/reference_data", "/miniconda", "-f", "-"]
    dx_upload_cmd = ["dx", "upload", "-", "--wait", "--brief", "-o", tar_output, "--visibility", "hidden"]
    print("create_asset: tar_cmd = " + " ".join(tar_cmd + ["|"] + dx_upload_cmd))
    tar_ps = subprocess.Popen(tar_cmd, stdout=subprocess.PIPE)
    upload_ps = subprocess.Popen(dx_upload_cmd, stdin=tar_ps.stdout, stdout=subprocess.PIPE)
    print("Finished uploading to " + tar_output)

    tar_ps.stdout.close()
    asset_tarball_id = upload_ps.communicate()[0].rstrip()
    tar_ps.wait()
    upload_ps.stdout.close()

    record_name = args.name
    record_details = {"archiveFileId": {"$dnanexus_link": asset_tarball_id}}
    record_properties = {"version": args.version,
                         "title": args.title,
                         "description": args.description}
    asset_bundle = dxpy.new_dxrecord(name=record_name,
                                     types=["AssetBundle"], details=record_details,
                                     properties=record_properties, close=True,
                                     project=dxpy.PROJECT_CONTEXT_ID)
    print(asset_bundle.get_id())
    return asset_bundle.get_id()

if __name__ == '__main__':
    main()
