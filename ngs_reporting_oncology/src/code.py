#!/usr/bin/env python
# ngs_reporting_oncology 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

from __future__ import print_function
import os
import dxpy
import subprocess
import re
import time
import glob

PATTERN_MAPPING = {
    re.compile('^file-[0-9A-Za-z]{24}$'): dxpy.DXFile
}


def download_job_inputs(input_dict):
    """Download files objects and update job input dict
    Updates all values that contain a dxlink
    """
    def create_dx_data_obj(inp_val):
        # TODO support getting outgoing file-id from DXRecords
        if type(inp_val) is not dict or '$dnanexus_link' not in inp_val:
            return
        dx_id = inp_val['$dnanexus_link']
        for reg_obj, dxmatch in PATTERN_MAPPING.iteritems():
            if reg_obj.match(dx_id):
                return dxmatch(dx_id)
    for inp_name, val in input_dict.iteritems():
        f_dx = create_dx_data_obj(val)
        print("f_dx: " + str(f_dx))
        if f_dx is not None:
            f_path = f_dx.name
            dxpy.download_dxfile(f_dx, f_path)
            input_dict[inp_name] = {
                "dxFileObj": f_dx,
                "filePath": f_path
            }
    return input_dict


def get_opts(updated_input_dict):
    """Add optional parameters"""
    OPT_CMD = {
        # 'sys_info_yaml': '--sys-cfg {param}',
    }
    cmd_opt = []
    for inp, val in updated_input_dict.iteritems():
        opt_str = OPT_CMD.get(inp)
        if opt_str is None:
            continue
        param = val.get('filePath') if type(val) is dict else val
        cmd_opt.append(opt_str.format(param=param))
    return cmd_opt


def run_cmdl(cmdl):
    print(" ".join(cmdl))
    subprocess.check_call(cmdl)


@dxpy.entry_point('main')
def main(**job_inputs):
    # Biolerplate for debugging and ngs_report scripts
    # data_dir = os.path.join(os.path.expanduser('~'), 'Data')
    # os.mkdir(data_dir)
    # Download inputs
    print('PATH = ' + str(os.environ['PATH']))
    os.environ['PATH'] += os.pathsep + '/miniconda/envs/ngs_reporting/bin' + os.pathsep + '/miniconda/bin'
    os.environ['CONDA_DEFAULT_ENV'] = 'ngs_reporting'
    print('PATH = ' + str(os.environ['PATH']))
    run_cmdl(['which', 'bcbio_postproc'])
    run_cmdl(['bcbio_postproc', '--version'])

    # print()
    # print('Removing NGS_Reporting from conda envirnoment to reinstall it from source')
    # run_cmdl(["conda", "remove", "ngs_reporting", "-y"])
    # print('Cloning the repository to get the latest source code')
    # run_cmdl(["git", "clone", "https://github.com/AstraZeneca-NGS/NGS_Reporting"])
    # os.chdir("NGS_Reporting")
    # run_cmdl(["pip", "install", "--upgrade", "pip"])
    # run_cmdl(["pip", "install", "--upgrade", "--ignore-installed", "setuptools"])
    # run_cmdl(["python", "setup.py", "install"])
    # os.chdir("..")
    # run_cmdl(['which', 'bcbio_postproc'])
    # run_cmdl(['bcbio_postproc', '--version'])

    print()
    sys_yaml = '/reference_data/system_info_Nexus_Test.yaml'
    if os.path.isfile(sys_yaml):
        print('Sys yaml ' + sys_yaml + ' exists')
    else:
        print('Sys yaml ' + sys_yaml + ' does not exist')

    postproc_cmdl = ['bcbio_postproc', '-d', '--sys-cfg', sys_yaml]

    print("job_inputs: " + str(job_inputs))
    job_inputs = download_job_inputs(job_inputs)
    print("updated job_inputs: " + str(job_inputs))
    postproc_cmdl.extend(get_opts(job_inputs))

    bcbio_tar = job_inputs['bcbio_tar']['filePath']
    print('Bcbio tar:', bcbio_tar)
    cmdl = ['tar', '-xvf', bcbio_tar]
    print('Extracting: ' + ' '.join(cmdl))
    subprocess.check_call(cmdl)
    bcbio_dir = bcbio_tar.replace('.tar.gz', '').replace('.tar', '')
    print('Bcbio directory:', bcbio_dir)
    postproc_cmdl.append(bcbio_dir)

    print('Runing post-processing with the command: "' + " ".join(postproc_cmdl) + '"')
    subprocess.check_call(postproc_cmdl)

    # Output files
    output = {}
    report_paths = glob.glob(os.path.join(bcbio_dir, "final*", "20??-??-??_*", "report.html"))
    if not report_paths:
        print('Error: report.html not found for project ' + bcbio_dir)
    else:
        report_path = report_paths[0]
        output['html_report'] = dxpy.dxlink(dxpy.upload_local_file(report_path))

    return output


dxpy.run()
